}
sprintf("Factorial of %s is ",x)
print(fact)
}
factorial(4)
factorial(8)
factorial(12)
for (i in 1:x) {
fact <- fact * i
}
sprintf("Factorial of %s is ",x)
print("Factorial of %s is ",fact)
factorial <- function(x) {
fact <- 1
for (i in 1:x) {
fact <- fact * i
}
sprintf("Factorial of %s is ",x)
print("Factorial of %s is ",fact)
}
factorial(12)
print("Factorial of %i is ",fact)
print("Factorial of %d is ",fact)
factorial <- function(x) {
fact <- 1
for (i in 1:x) {
fact <- fact * i
}
sprintf("Factorial of %s is ",x)
print("Factorial of %d is ",fact)
}
factorial(12)
factorial <- function(x) {
fact <- 1
for (i in 1:x) {
fact <- fact * i
}
sprintf("Factorial of %s is ",x)
sprintf("Factorial of %d is ",fact)
}
factorial(12)
for (i in 1:x) {
fact <- fact * i
}
sprintf("Factorial of %d is ",fact)
factorial <- function(x) {
fact <- 1
for (i in 1:x) {
fact <- fact * i
}
sprintf("Factorial of %d is ",fact)
}
factorial(12)
factorial <- function(x) {
fact <- 1
for (i in 1:x) {
fact <- fact * i
}
sprintf("Factorial of %d is %d ",x,fact)
}
factorial(12)
print(seq(from = 20, to = 50, by = 5))
##Find 12 factorial
Below is the program
```r{}
factorial <- function(x) {
if x<=0
return 0
fact <- 1
for (i in 1:x) {
fact <- fact * i
}
sprintf("Factorial of %d is %d ",x,fact)
return fact
}
```
##Find 12 factorial
Below is the program
```r{}
factorial <- function(x) {
if x<=0 {
return 0
}
fact <- 1
for (i in 1:x) {
fact <- fact * i
}
sprintf("Factorial of %d is %d ",x,fact)
return fact
}
```
factorial <- function(x) {
if x<=0 {
return 0
}
fact <- 1
for (i in 1:x) {
fact <- fact * i
}
sprintf("Factorial of %d is %d ",x,fact)
return fact
}
factorial <- function(x) {
if x<=0 {
return 0
}
fact <- 1
for (i in 1:x) {
fact <- fact * i
}
sprintf("Factorial of %d is %d ",x,fact)
return fact
}
factorial(4)
factorial <- function(x) {
if x<=0 {
return 0
}
fact <- 1
for (i in 1:x) {
fact <- fact * i
}
sprintf("Factorial of %d is %d ",x,fact)
return fact
}
factorial(0
factorial <- function(x) {
if x<=0 {
return 0
}
fact <- 1
for (i in 1:x) {
fact <- fact * i
}
sprintf("Factorial of %d is %d ",x,fact)
return fact
}
factorial(0)
install.packages("mosaic")
library(mosaic)
install.packages("mosaic")
library(mosaic)
g = D(x^2 ~ x)
install.packages("mosaic")
g = D(x^2 ~ x)
g(1)
install.packages("mosaic")
library(mosaic)
g = D(x^2 ~ x)
g(1)
g(1)
##install.packages("mosaic")
library(mosaic)
g = D(x^2 ~ x)
g(1)
g=D(x^2)
f=expression(x^2)
D(f, 'x')
f(2)
g=D(f, 'x')
g(2)
g(2)
g(2)
g(2)
install.packages("Deriv")
library(Deriv)
f <- function(x) {
1 - e^(-2x)
}
g <- deriv(f)
g(2)
g <- deriv(f~x)
library("mosaic", lib.loc="~/R/win-library/3.5")
g(2)
g <- deriv(f)
deriv(f)
g <- Deriv(f)
g(2)
install.packages("mosaicCalc")
library(mosaicCalc)
D(f)
D(1 - e^(-2x))
D(1 - exp^(-2x))
D(1 - exp^(-2x)~x)
D(x^2~x)
D(f~x)
D((1-exp^(-2x))~x)
g=D((1-exp^(-2x))~x)
g=D((1-exp^(-2x))~x)
g=D(1-exp^(-2x)~  x)
g=D(1-e^(-2x)~  x)
#Find the derivative for the functions below with respect to x
# 1. F(x|x≥0)=1−e−λx
#d/dx(1-e^-Cx) => d/dx(1) - d/dx(e^-Cx) => 0 - Ce^(-Cx) => -Ce^(-Cx)
print(exp(2))
g=D(1-exp^(-2x)~  x)
g=D(1-e^(-2x)~  x)
g=D((x-a)/(b-a)x)
g=D((x-a)/(b-a)~x)
g(2)
g(2,2)
Deriv(f)
B
B <- matrix(c(1,3,4,2,3,6,3,1,8),3,3)
print B
print(B)
---
title: "DATA science week1 assignment"
output: html_document
---
### 1. Find 12 factorial
Below is the program
```r{}
factorial <- function(x) {
if x<=0 {
return 0
}
fact <- 1
for (i in 1:x) {
fact <- fact * i
}
sprintf("Factorial of %d is %d ",x,fact)
return fact
}
```
```r{}
kelvin_to_celsius <- function(temp_K) {
temp_C <- temp_K - 273.15
return(temp_C)
}
# absolute zero in Celsius
kelvin_to_celsius(0)
factorial(12)
```
The factorial of 12 is `r factorial(10)`
### 2. Create a numeric vector containing numbers from 20 to 50 in a sequence of 5
print(seq(from = 20, to = 50, by = 5))
---
title: "DATA science week1 assignment"
output: html_document
---
### 1. Find 12 factorial
Below is the program
```r{}
factorial <- function(x) {
if x<=0 {
return 0
}
fact <- 1
for (i in 1:x) {
fact <- fact * i
}
sprintf("Factorial of %d is %d ",x,fact)
return fact
}
```
```r{}
kelvin_to_celsius <- function(temp_K) {
temp_C <- temp_K - 273.15
return(temp_C)
}
# absolute zero in Celsius
kelvin_to_celsius(0)
factorial(12)
```
The factorial of 12 is `r factorial(10)`
### 2. Create a numeric vector containing numbers from 20 to 50 in a sequence of 5
print(seq(from = 20, to = 50, by = 5))
### 1. Find 12 factorial
Below is the program
```r{}
factorial <- function(x) {
if x<=0 {
return 0
}
fact <- 1
for (i in 1:x) {
fact <- fact * i
}
sprintf("Factorial of %d is %d ",x,fact)
return fact
}
```
```r{}
kelvin_to_celsius <- function(temp_K) {
temp_C <- temp_K - 273.15
return(temp_C)
}
# absolute zero in Celsius
kelvin_to_celsius(0)
factorial(12)
```
The factorial of 12 is `r factorial(10)`
### 2. Create a numeric vector containing numbers from 20 to 50 in a sequence of 5
print(seq(from = 20, to = 50, by = 5))
install.packages(dice)
install.package(dice)
install.packages("dice")
library("dice")
getEventProb(1, 2, 6, NA)
getEventProb(1, 2, 6, list(1))
getEventProb(1, 2, 6, list(2))
getEventProb(1, 2, 6, list(5))
getEventProb(1, 2, 6, list(12))
getEventProb(1, 2, 6, list(7))
getEventProb(1, 2, 6, list(12))
getEventProb(1, 2, 6, list(8))
getEventProb(1, 2, 6, list(5))
getEventProb(1, 2, 6, list(12))
print(mat)
mat
print(mat)
toString(mat)
?matrix
mat
source('~/.active-rstudio-document')
mat1
getEventProb(1, 2, 6, list(5))
getEventProb(1, 2, 6, list(5))
install.packages("dice")
library("dice")
getEventProb(1, 2, 6, list(5))
getEventProb(1, 2, 6, list(12))
install.packages("rcurl")
install.packages("RCurl")
library(RCurl)
url_content <- getURL("https://archive.ics.uci.edu/ml/machine-learning-databases/mushroom/agaricus-lepiota.data")
url_content <- getURL("https://archive.ics.uci.edu/ml/machine-learning-databases/mushroom/agaricus-lepiota.data",
, ssl.verifyhost=FALSE, ssl.verifypeer=FALSE)
url_content <- getURL("https://archive.ics.uci.edu/ml/machine-learning-databases/mushroom/agaricus-lepiota.data",
ssl.verifyhost=FALSE, ssl.verifypeer=FALSE)
url_content <- getURL(url = "https://archive.ics.uci.edu/ml/machine-learning-databases/mushroom/agaricus-lepiota.data",
ssl.verifyhost=FALSE, ssl.verifypeer=FALSE)
url_content <- getURL(url = "https://archive.ics.uci.edu/ml/machine-learning-databases/mushroom/agaricus-lepiota.data",
ssl.verifyhost=FALSE, ssl.verifypeer=FALSE)
?getURL
url_content <- getURL(url = "https://archive.ics.uci.edu/ml/machine-learning-databases/mushroom/agaricus-lepiota.data",
ssl.verifypeer=FALSE)
url_content <- getURL(url = "http://archive.ics.uci.edu/ml/machine-learning-databases/mushroom/agaricus-lepiota.data",
ssl.verifypeer=FALSE)
fileURL <- "https://archive.ics.uci.edu/ml/machine-learning-databases/mushroom/agaricus-lepiota.data"
myfile <- readLines(fileURL)
head(myfile)
url_content
?readLines
dataFrame <- read.csv(myfile, header = F, stringsAsFactors = F)
?textConnection
dataFrame <- read.csv(textConnection(myfile), header = F, stringsAsFactors = F)
View(dataFrame)
mushroomDF <- read.csv(textConnection(myfile), header = F, stringsAsFactors = F)
url <- "https://archive.ics.uci.edu/ml/machine-learning-databases/mushroom/agaricus-lepiota.data"
rawData <- readLines(url)
mushroomDF <- read.csv(textConnection(rawData), header = F, stringsAsFactors = F)
View(mushroomDF)
names(mushroomDF) <- c("cap-shape", "cap-surface", "cap-color",
"bruises?", "odor", "gill-attachment",
"gill-spacing",	"gill-size", "gill-color",
"stalk-shape", "stalk-root", "talk-surface-above-ring",
"stalk-surface-below-ring",	"stalk-color-above-ring",
"veil-type", "veil-color", "ring-number", "ring-type",
"spore-print-color",	"population", "habitat")
names(mushroomDF)
names(mushroomDF) <- c("cap-shape", "cap-surface", "cap-color",
"bruises?", "odor", "gill-attachment",
"gill-spacing",	"gill-size", "gill-color",
"stalk-shape", "stalk-root", "talk-surface-above-ring",
"stalk-surface-below-ring",	"stalk-color-above-ring", "stalk-color-below-ring",
"veil-type", "veil-color", "ring-number", "ring-type",
"spore-print-color",	"population", "habitat")
names(mushroomDF)
names(mushroomDF) <- c("class", "cap-shape", "cap-surface", "cap-color",
"bruises?", "odor", "gill-attachment",
"gill-spacing",	"gill-size", "gill-color",
"stalk-shape", "stalk-root", "talk-surface-above-ring",
"stalk-surface-below-ring",	"stalk-color-above-ring",
"veil-type", "veil-color", "ring-number", "ring-type",
"spore-print-color",	"population", "habitat")
names(mushroomDF)
names(mushroomDF) <- c("class", "cap-shape", "cap-surface", "cap-color",
"bruises?", "odor", "gill-attachment",
"gill-spacing",	"gill-size", "gill-color",
"stalk-shape", "stalk-root", "talk-surface-above-ring",
"stalk-surface-below-ring",	"stalk-color-above-ring",
"veil-type", "veil-color", "ring-number", "ring-type",
"spore-print-color",	"population", "habitat")
names(mushroomDF)
names(mushroomDF) <- c("class", "cap-shape", "cap-surface", "cap-color",
"bruises?", "odor", "gill-attachment",
"gill-spacing",	"gill-size", "gill-color",
"stalk-shape", "stalk-root", "stalk-surface-above-ring",
"stalk-surface-below-ring",	"stalk-color-above-ring", "stalk-color-above-ring",
"veil-type", "veil-color", "ring-number", "ring-type",
"spore-print-color",	"population", "habitat")
names(mushroomDF)
View(mushroomDF)
class(mushroomDF)
typeof(mushroomDF)
?subset
mushroomSubSetDF <- subset(mushroomDF, subset = population="abundant", select = c(class, cap-color))
mushroomSubSetDF <- subset(mushroomDF, subset = population=="abundant", select = c(class, cap-color))
mushroomSubSetDF <- subset(mushroomDF, subset = population=="abundant", select = c("class", "cap-color"))
View(mushroomSubSetDF)
mushroomSubSetDF <- subset(mushroomDF, subset = population=="a", select = c("class", "cap-color"))
View(mushroomSubSetDF)
a
mushroomSubSetDF
mushroomSubSetDF <- subset(mushroomDF, subset = class=="p", select = c("class", "cap-color"))
mushroomSubSetDF
mushroomSubSetDF <- subset(mushroomDF, subset = population=="a", select = c("class", "cap-color"))
mushroomSubSetDF
?subset
mushroomSubSetDF <- subset(mushroomDF, subset = population==c("a","s","n"), select = c("class", "cap-color"))
mushroomSubSetDF
mushroomSubSetDF <- subset(mushroomDF, subset = population==c("a","s","n"), select = c("class", "cap-color", "cap-surface", "odor",
"veil-type", "veil-color"))
mushroomSubSetDF
mushroomSubSetDF <- subset(mushroomDF, subset = population==c("a","s","n","c"), select = c("class", "cap-color", "cap-surface", "odor",
"veil-type", "veil-color"))
mushroomSubSetDF
?replace
class_values <- c(edible=e, poisonous=p)
class_values <- c(edible='e', poisonous='p')
names(class_values)
class_values
mushroomSubSetDFDummy <- mushroomSubSetDF
class_values['e']
class_values["e"]
class_values["edible"]
class_values <- c(e='edible', p='poisonous')
class_values["edible"]
class_values["e"]
for (val <- class_values) {
print(val)
}
for (val <- class_values) {
print(val)
}
for (val <- class_values) {   print(val) }
for (val in class_values) {   print(val) }
mushroomSubSetDFDummy['a']
mushroomSubSetDFDummy[['a']]
mushroomSubSetDFDummy[['e']]
class(mushroomSubSetDFDummy)
source("more/present.R")
?which
?max
present
source("more/arbuthnot.R")
setwd("C:\\CUNY\\GIT\\CUNY\\Semester1\\606\\Week1\\Lab0")
source("more/present.R")
present
present[which.max(present$boys)]
present[which.max(present$boys),]
present[which.max(present$boys),]
present$total_birth <- present$boys + present$girls
present
which.max(present$total_birth)
present[which.max(present$total_birth)]
present[which.max(present$total_birth),]
?which.max
present[present$total_birth)==max(present$total_birth)]
present[present$total_birth==max(present$total_birth)]
present[present$total_birth==max(present$total_birth),]
present[,present$total_birth==max(present$total_birth)]
present[present$total_birth==max(present$total_birth),]
present[present$total_birth==max(present$total_birth),][1,]
present$total_birth <- present$boys + present$girls
present[present$total_birth==max(present$total_birth),]$year
plot(x=present$years, y=(present$boys/present$girls), type = l)
plot(x=present$years, y=present$boys, type = l)
plot(x=present$years, y=present$boys, type = "l")
plot(present$year, present$boys, type="l")
plot(x=present$years, y=present$boys, type = "l")
plot(x = present$years, y = present$boys, type = "l", )
present
plot(present$year, present$boys/present$girls, type = "l", sub = "Boys to Girls ratio")
source("more/arbuthnot.R")
plot(arbuthnot$year, arbuthnot$girls)
plot(arbuthnot$year, arbuthnot$girls, type="l")
arbuthnot$total_count <- arbuthnot$boys + arbuthnot$girls
plot(arbuthnot$year, arbuthnot$total_count, type="l")
plot(x = present$years, y = present$total_birth, type = "l", )
plot(x = present$year, y = present$total_birth, type = "l", )
plot(arbuthnot$year, arbuthnot$total_count, type="l")
present[which.max(present$total_birth),]
present[which.max(present$total_birth),]$year
present[which.max(present$total_birth),]
present
url <- "https://archive.ics.uci.edu/ml/machine-learning-databases/mushroom/agaricus-lepiota.data"
rawData <- readLines(url)
mushroomDF <- read.csv(textConnection(rawData), header = F, stringsAsFactors = F)
names(mushroomDF) <- c("class", "cap-shape", "cap-surface", "cap-color",
"bruises?", "odor", "gill-attachment",
"gill-spacing",	"gill-size", "gill-color",
"stalk-shape", "stalk-root", "stalk-surface-above-ring",
"stalk-surface-below-ring",	"stalk-color-above-ring", "stalk-color-above-ring",
"veil-type", "veil-color", "ring-number", "ring-type",
"spore-print-color",	"population", "habitat")
names(mushroomDF)
View(mushroomSubSetDF)
View(mushroomDF)
mushroomSubSetDF <- subset(mushroomDF, subset = population==c("a","s","n","c"), select = c("class", "cap-color", "cap-surface", "odor",
"veil-type", "veil-color"))
View(mushroomSubSetDF)
class(mushroomSubSetDFDummy)
?replace
??replace
??data.frame
packages.install("anchors")
package.install("anchors")
install.packages("anchors")
install.packages("anchors")
